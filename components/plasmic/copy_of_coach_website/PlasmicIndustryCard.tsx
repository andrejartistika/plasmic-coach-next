// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oVWAucqWj6DsPJvsydPAdo
// Component: 2wBvIzW_i3cBDZ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_coach_website.module.css"; // plasmic-import: oVWAucqWj6DsPJvsydPAdo/projectcss
import sty from "./PlasmicIndustryCard.module.css"; // plasmic-import: 2wBvIzW_i3cBDZ/css

export type PlasmicIndustryCard__VariantMembers = {
  consumerElectronics: "consumerElectronics";
  manufacturing: "manufacturing";
  pharmaceuticals: "pharmaceuticals";
  telecom: "telecom";
  luxuryGoods: "luxuryGoods";
};
export type PlasmicIndustryCard__VariantsArgs = {
  consumerElectronics?: SingleBooleanChoiceArg<"consumerElectronics">;
  manufacturing?: SingleBooleanChoiceArg<"manufacturing">;
  pharmaceuticals?: SingleBooleanChoiceArg<"pharmaceuticals">;
  telecom?: SingleBooleanChoiceArg<"telecom">;
  luxuryGoods?: SingleBooleanChoiceArg<"luxuryGoods">;
};
type VariantPropType = keyof PlasmicIndustryCard__VariantsArgs;
export const PlasmicIndustryCard__VariantProps = new Array<VariantPropType>(
  "consumerElectronics",
  "manufacturing",
  "pharmaceuticals",
  "telecom",
  "luxuryGoods"
);

export type PlasmicIndustryCard__ArgsType = {};
type ArgPropType = keyof PlasmicIndustryCard__ArgsType;
export const PlasmicIndustryCard__ArgProps = new Array<ArgPropType>();

export type PlasmicIndustryCard__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  text?: p.Flex<"div">;
};

export interface DefaultIndustryCardProps {
  consumerElectronics?: SingleBooleanChoiceArg<"consumerElectronics">;
  manufacturing?: SingleBooleanChoiceArg<"manufacturing">;
  pharmaceuticals?: SingleBooleanChoiceArg<"pharmaceuticals">;
  telecom?: SingleBooleanChoiceArg<"telecom">;
  luxuryGoods?: SingleBooleanChoiceArg<"luxuryGoods">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicIndustryCard__RenderFunc(props: {
  variants: PlasmicIndustryCard__VariantsArgs;
  args: PlasmicIndustryCard__ArgsType;
  overrides: PlasmicIndustryCard__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "consumerElectronics",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ($props, $state, $ctx) => $props.consumerElectronics
          : undefined
      },
      {
        path: "manufacturing",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ($props, $state, $ctx) => $props.manufacturing
          : undefined
      },
      {
        path: "pharmaceuticals",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ($props, $state, $ctx) => $props.pharmaceuticals
          : undefined
      },
      {
        path: "telecom",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.telecom : undefined
      },
      {
        path: "luxuryGoods",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ($props, $state, $ctx) => $props.luxuryGoods
          : undefined
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, $props, $ctx);

  const [$queries, setDollarQueries] = React.useState({});

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootconsumerElectronics]: hasVariant(
            $state,
            "consumerElectronics",
            "consumerElectronics"
          ),
          [sty.rootluxuryGoods]: hasVariant(
            $state,
            "luxuryGoods",
            "luxuryGoods"
          ),
          [sty.rootmanufacturing]: hasVariant(
            $state,
            "manufacturing",
            "manufacturing"
          ),
          [sty.rootpharmaceuticals]: hasVariant(
            $state,
            "pharmaceuticals",
            "pharmaceuticals"
          ),
          [sty.roottelecom]: hasVariant($state, "telecom", "telecom")
        }
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__hqUi, {
          [sty.freeBoxconsumerElectronics__hqUiOekVp]: hasVariant(
            $state,
            "consumerElectronics",
            "consumerElectronics"
          ),
          [sty.freeBoxmanufacturing__hqUiDaehV]: hasVariant(
            $state,
            "manufacturing",
            "manufacturing"
          ),
          [sty.freeBoxtelecom__hqUiRaOh]: hasVariant(
            $state,
            "telecom",
            "telecom"
          )
        })}
      >
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img, {
            [sty.imgconsumerElectronics]: hasVariant(
              $state,
              "consumerElectronics",
              "consumerElectronics"
            ),
            [sty.imgluxuryGoods]: hasVariant(
              $state,
              "luxuryGoods",
              "luxuryGoods"
            ),
            [sty.imgmanufacturing]: hasVariant(
              $state,
              "manufacturing",
              "manufacturing"
            ),
            [sty.imgpharmaceuticals]: hasVariant(
              $state,
              "pharmaceuticals",
              "pharmaceuticals"
            ),
            [sty.imgtelecom]: hasVariant($state, "telecom", "telecom")
          })}
          displayHeight={"70px" as const}
          displayMaxHeight={"none" as const}
          displayMaxWidth={"100%" as const}
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={"70px" as const}
          loading={"lazy" as const}
          src={
            hasVariant($state, "luxuryGoods", "luxuryGoods") &&
            triggers.hover_root
              ? {
                  src: "/plasmic/copy_of_coach_website/images/iconIndustryLuxuryHoversvg.svg",
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }
              : hasVariant($state, "telecom", "telecom") && triggers.hover_root
              ? {
                  src: "/plasmic/copy_of_coach_website/images/iconIndustryTelecomHoversvg.svg",
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }
              : hasVariant($state, "pharmaceuticals", "pharmaceuticals") &&
                triggers.hover_root
              ? {
                  src: "/plasmic/copy_of_coach_website/images/iconIndustryPharmaHoversvg.svg",
                  fullWidth: 148,
                  fullHeight: 150,
                  aspectRatio: 0.985915
                }
              : hasVariant($state, "manufacturing", "manufacturing") &&
                triggers.hover_root
              ? {
                  src: "/plasmic/copy_of_coach_website/images/iconIndustryManufacturingHoversvg.svg",
                  fullWidth: 148,
                  fullHeight: 150,
                  aspectRatio: 0.985915
                }
              : hasVariant(
                  $state,
                  "consumerElectronics",
                  "consumerElectronics"
                ) && triggers.hover_root
              ? {
                  src: "/plasmic/copy_of_coach_website/images/iconIndustryConsumerHoversvg.svg",
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }
              : hasVariant($state, "luxuryGoods", "luxuryGoods")
              ? {
                  src: "/plasmic/copy_of_coach_website/images/iconIndustryLuxurysvg.svg",
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }
              : hasVariant($state, "telecom", "telecom")
              ? {
                  src: "/plasmic/copy_of_coach_website/images/iconIndustryTelecomsvg.svg",
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }
              : hasVariant($state, "pharmaceuticals", "pharmaceuticals")
              ? {
                  src: "/plasmic/copy_of_coach_website/images/iconIndustryPharmasvg2.svg",
                  fullWidth: 148,
                  fullHeight: 150,
                  aspectRatio: 0.985915
                }
              : hasVariant($state, "manufacturing", "manufacturing")
              ? {
                  src: "/plasmic/copy_of_coach_website/images/iconIndustryManufacturingsvg.svg",
                  fullWidth: 148,
                  fullHeight: 150,
                  aspectRatio: 0.985915
                }
              : hasVariant($state, "consumerElectronics", "consumerElectronics")
              ? {
                  src: "/plasmic/copy_of_coach_website/images/iconIndustryConsumersvg.svg",
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }
              : {
                  src: "/plasmic/copy_of_coach_website/images/iconIndustryConsumersvg.svg",
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }
          }
        />

        <div className={classNames(projectcss.all, sty.freeBox__c55Uv)}>
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text,
              {
                [sty.textconsumerElectronics]: hasVariant(
                  $state,
                  "consumerElectronics",
                  "consumerElectronics"
                ),
                [sty.textluxuryGoods]: hasVariant(
                  $state,
                  "luxuryGoods",
                  "luxuryGoods"
                ),
                [sty.textmanufacturing]: hasVariant(
                  $state,
                  "manufacturing",
                  "manufacturing"
                ),
                [sty.textpharmaceuticals]: hasVariant(
                  $state,
                  "pharmaceuticals",
                  "pharmaceuticals"
                ),
                [sty.texttelecom]: hasVariant($state, "telecom", "telecom")
              }
            )}
          >
            {hasVariant($state, "luxuryGoods", "luxuryGoods")
              ? "Luxury Goods"
              : hasVariant($state, "telecom", "telecom")
              ? "Telecom"
              : hasVariant($state, "pharmaceuticals", "pharmaceuticals")
              ? "Pharmaceuticals"
              : hasVariant($state, "manufacturing", "manufacturing")
              ? "Manufacturing"
              : hasVariant($state, "consumerElectronics", "consumerElectronics")
              ? "Consumer Electronics"
              : "Industry"}
          </div>
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "text"],
  img: ["img"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof p.PlasmicImg;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicIndustryCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicIndustryCard__VariantsArgs;
    args?: PlasmicIndustryCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicIndustryCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicIndustryCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicIndustryCard__ArgProps,
          internalVariantPropNames: PlasmicIndustryCard__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicIndustryCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicIndustryCard";
  } else {
    func.displayName = `PlasmicIndustryCard.${nodeName}`;
  }
  return func;
}

export const PlasmicIndustryCard = Object.assign(
  // Top-level PlasmicIndustryCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicIndustryCard
    internalVariantProps: PlasmicIndustryCard__VariantProps,
    internalArgProps: PlasmicIndustryCard__ArgProps
  }
);

export default PlasmicIndustryCard;
/* prettier-ignore-end */
