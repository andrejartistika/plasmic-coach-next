// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oVWAucqWj6DsPJvsydPAdo
// Component: rW0VdT_rQ3NFD
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ReusableHeader from "../../ReusableHeader"; // plasmic-import: HYxHqp5lqPNvYs/component
import Button from "../../Button"; // plasmic-import: 8uXEbGCqxCxV6S/component
import { ShowcaseComponentMobile } from "components/Showcase/ShowcaseComponentMobile"; // plasmic-import: 65iGVZTsnBzZzm/codeComponent
import { ShowcaseComponent } from "components/Showcase/ShowcaseComponent"; // plasmic-import: uYWRhk1wutltyF/codeComponent
import Slider from "react-slick"; // plasmic-import: HOQUyOpClJ/codeComponent
import IndustryCard from "../../IndustryCard"; // plasmic-import: 2wBvIzW_i3cBDZ/component
import Footer from "../../Footer"; // plasmic-import: hqPlJbMpP0AGl0/component

import { useScreenVariants as useScreenVariantsvsF6OfTsfNeByl } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: VsF6OfTsfNeBYL/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_coach_website.module.css"; // plasmic-import: oVWAucqWj6DsPJvsydPAdo/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: rW0VdT_rQ3NFD/css

import CorrectsvgIcon from "./icons/PlasmicIcon__Correctsvg"; // plasmic-import: Z-AR8XJDcwVeYH/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: hUz3QbUrxnIJqL/icon
import DownArrowIcon from "./icons/PlasmicIcon__DownArrow"; // plasmic-import: JLBYhDmNrAxQHA/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: TE7ZlDmP2v4Kt-/icon

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {
  whiteblueButton?: React.ReactNode;
};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>(
  "whiteblueButton"
);

export type PlasmicHomepage__OverridesType = {
  root2?: p.Flex<"div">;
  reusableHeader?: p.Flex<typeof ReusableHeader>;
  section1?: p.Flex<"div">;
  copy?: p.Flex<"div">;
  ctaBlog2?: p.Flex<"div">;
  section12?: p.Flex<"div">;
  section11?: p.Flex<"div">;
  section2?: p.Flex<"div">;
  section3?: p.Flex<"div">;
  section4?: p.Flex<"div">;
  whiteblueButton2?: p.Flex<typeof Button>;
  section5?: p.Flex<"div">;
  whiteblueButton3?: p.Flex<typeof Button>;
  section10?: p.Flex<"div">;
  showcaseComponentMobile?: p.Flex<typeof ShowcaseComponentMobile>;
  featuresButton?: p.Flex<typeof Button>;
  section13?: p.Flex<"div">;
  showcaseComponent?: p.Flex<typeof ShowcaseComponent>;
  section6?: p.Flex<"div">;
  section7?: p.Flex<"div">;
  section8?: p.Flex<"div">;
  ctaBlog?: p.Flex<"div">;
  section9?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultHomepageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsvsF6OfTsfNeByl()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root2"}
          data-plasmic-override={overrides.root2}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root2
          )}
        >
          <ReusableHeader
            data-plasmic-name={"reusableHeader"}
            data-plasmic-override={overrides.reusableHeader}
            className={classNames("__wab_instance", sty.reusableHeader)}
          />

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__j9RZ9)} />
          ) : null}

          <p.Stack
            as={"div"}
            data-plasmic-name={"section1"}
            data-plasmic-override={overrides.section1}
            hasGap={true}
            className={classNames(projectcss.all, sty.section1)}
          >
            <div className={classNames(projectcss.all, sty.columns__xQjxF)}>
              {true ? (
                <div className={classNames(projectcss.all, sty.column__u4Gk4)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__pMA)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"copy"}
                      data-plasmic-override={overrides.copy}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.copy)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___0ZNK
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nVtkt
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            {
                              <h1
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h1,
                                  projectcss.__wab_text,
                                  sty.h1__kHiWx
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "Simplified\nin-house training that scales."
                                  : "Simplified in-house training that scales."}
                              </h1>
                            }
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rh2Pv
                          )}
                        >
                          {
                            "Coach helps companies detect and fix knowledge gaps through personalized training"
                          }
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={p.PlasmicLink}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__snCFf
                        )}
                        component={Link}
                        href={"https://calendly.com/kalina-t/30min" as const}
                        platform={"nextjs"}
                        target={"_blank" as const}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nm7Yu
                          )}
                        >
                          {"GET STARTED"}
                        </div>

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__rdh8J)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"15px" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/copy_of_coach_website/images/buttonCaretWhitesvg2.svg",
                            fullWidth: 108,
                            fullHeight: 150,
                            aspectRatio: 0.722222
                          }}
                        />
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                </div>
              ) : null}

              <div className={classNames(projectcss.all, sty.column__bHXsZ)}>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__t8VKl)}
                  />
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__zjr9W)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"340px" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    src={{
                      src: "/plasmic/copy_of_coach_website/images/bannerimg1Png.png",
                      fullWidth: 1436,
                      fullHeight: 1410,
                      aspectRatio: undefined
                    }}
                  />
                ) : null}
              </div>
            </div>
          </p.Stack>

          <div
            data-plasmic-name={"ctaBlog2"}
            data-plasmic-override={overrides.ctaBlog2}
            className={classNames(projectcss.all, sty.ctaBlog2)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"section12"}
              data-plasmic-override={overrides.section12}
              hasGap={true}
              className={classNames(projectcss.all, sty.section12)}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__sa8Q
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                  <React.Fragment>
                    <React.Fragment>{"What is "}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#3E7CB1" }}
                    >
                      {"Coach?"}
                    </span>
                  </React.Fragment>
                ) : (
                  <React.Fragment>
                    <React.Fragment>{"What is "}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#3E7CB1" }}
                    >
                      {"Coach?"}
                    </span>
                  </React.Fragment>
                )}
              </h2>

              <div className={classNames(projectcss.all, sty.freeBox___1QnW)} />
            </p.Stack>

            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__uapt)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("auto" as const)
                    : ("auto" as const)
                }
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("231px" as const)
                    : ("263px" as const)
                }
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/copy_of_coach_website/images/group937Svg.svg",
                  fullWidth: 300,
                  fullHeight: 74,
                  aspectRatio: 4.078652
                }}
              />
            ) : null}

            <div className={classNames(projectcss.all, sty.columns__dWu5)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.column__bmNlm)}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__o6Yy0)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"135px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/copy_of_coach_website/images/group58Png.png",
                      fullWidth: 406,
                      fullHeight: 328,
                      aspectRatio: undefined
                    }}
                  />
                ) : null}
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ogvYe)}
                  >
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zTuqn
                        )}
                      >
                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___8TxPq
                            )}
                          >
                            <h1
                              className={classNames(
                                projectcss.all,
                                projectcss.h1,
                                projectcss.__wab_text,
                                sty.h1__dfOzm
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "mobileOnly"
                              )
                                ? "Coach is a learning platform that helps companies detect and fix knowledge gaps through interactive learning games. \n\nIt offers a unique and engaging learning experience for employees that promotes skill development and knowledge mastery and simplifies content creation for management with easy-to-use features in the admin panel.\n\nThrough science-based methodologies like adaptive learning, spaced repetition and gamification, it guarantees efficient knowledge retention rates."
                                : "Coach is a learning platform that helps companies detect and fix knowledge gaps through interactive learning games. \n\nCoach offers a unique and engaging learning experience for employees that promotes skill development and knowledge mastery, and uses science-based methodologies like adaptive learning, spaced repetition, and gamification to guarantee efficient knowledge retention rates.\n\nCoach simplifies content creation for management with easy-to-use features in the admin panel, and provides detailed statistics for assessment and improvement of training effectiveness. "}
                            </h1>
                          </div>
                        ) : null}
                      </div>
                    ) : null}
                  </div>
                ) : null}
              </p.Stack>
            </div>

            {true ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"section11"}
                data-plasmic-override={overrides.section11}
                hasGap={true}
                className={classNames(projectcss.all, sty.section11)}
              >
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__jv2Nn
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{"Our latest \n"}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#3E7CB1" }}
                    >
                      {"news and resources"}
                    </span>
                  </React.Fragment>
                </h1>

                <div
                  className={classNames(projectcss.all, sty.freeBox__gaLu2)}
                />
              </p.Stack>
            ) : null}
            {true ? (
              <div className={classNames(projectcss.all, sty.columns__lZRsE)}>
                <div className={classNames(projectcss.all, sty.column___27N0I)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__hy3L)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__wWwuE)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_coach_website/images/frame910Jpg.jpeg",
                        fullWidth: 323,
                        fullHeight: 203,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___7Fcjd
                      )}
                    >
                      {"PRESS ARTICLE"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6Abkd
                      )}
                    >
                      {"Konceptiva: startup of the month January ’22!"}
                    </div>
                  </p.Stack>
                </div>

                <div className={classNames(projectcss.all, sty.column___89YUb)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__yMkW)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__g7JWf)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_coach_website/images/frame909Jpg.jpeg",
                        fullWidth: 323,
                        fullHeight: 203,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1R33Q
                      )}
                    >
                      {"EVENT"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bw0XD
                      )}
                    >
                      {"Gamification of Corporate\nTraining - #Session1"}
                    </div>
                  </p.Stack>
                </div>

                <div className={classNames(projectcss.all, sty.column___8Tl1G)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___1DpfC)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__guVgf)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_coach_website/images/frame908Jpg.jpeg",
                        fullWidth: 323,
                        fullHeight: 203,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__myZmg
                      )}
                    >
                      {"BLOG"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zGncl
                      )}
                    >
                      {"Here are 5 tips for creating\nan effective course"}
                    </div>
                  </p.Stack>
                </div>
              </div>
            ) : null}
          </div>

          <div
            data-plasmic-name={"section2"}
            data-plasmic-override={overrides.section2}
            className={classNames(projectcss.all, sty.section2)}
          >
            <div className={classNames(projectcss.all, sty.column__fzCxg)}>
              <div className={classNames(projectcss.all, sty.freeBox__orvMu)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__dlKhw)}
                  displayHeight={"37px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/copy_of_coach_website/images/group926Svg.svg",
                    fullWidth: 300,
                    fullHeight: 76,
                    aspectRatio: 3.959184
                  }}
                />

                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__yf938
                  )}
                >
                  {"Prepare training content faster"}
                </h2>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hlPng
                  )}
                >
                  {
                    "Import content you already have, easily create new modules or let our team take care of it. Cover company-specific knowledge like: product training, procedures & safety, sales training, onboarding and much more."
                  }
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__muztl)}>
                  <CorrectsvgIcon
                    className={classNames(projectcss.all, sty.svg___9Mb10)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cnNOe
                    )}
                  >
                    {"8 QUESTION TYPES + LESSONS IN ANY FORMAT"}
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__wylCd)}>
                  <CorrectsvgIcon
                    className={classNames(projectcss.all, sty.svg__tif86)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__j9K4K
                    )}
                  >
                    {"UNLIMITED TRAINING MODULES"}
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__kWf3)}>
                  <CorrectsvgIcon
                    className={classNames(projectcss.all, sty.svg__mmQf6)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__o77Qg
                    )}
                  >
                    {"AUTOGENERATE QUESTIONS "}
                  </div>
                </div>
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.column__urKHa)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img___25FnY)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("367px" as const)
                    : ("100%" as const)
                }
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"85%" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/copy_of_coach_website/images/_1AddContentpng2.png",
                  fullWidth: 1041,
                  fullHeight: 1100,
                  aspectRatio: undefined
                }}
              />
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox___6CGmb)}>
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__mWSdv)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/copy_of_coach_website/images/crookedBg4Svg.svg",
                fullWidth: 300,
                fullHeight: 14,
                aspectRatio: 20.869565
              }}
            />
          </div>

          <div
            data-plasmic-name={"section3"}
            data-plasmic-override={overrides.section3}
            className={classNames(projectcss.all, sty.section3)}
          >
            <div className={classNames(projectcss.all, sty.column__vEsvP)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__tMBzh)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("372px" as const)
                    : ("100%" as const)
                }
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"85%" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/copy_of_coach_website/images/_2DeployAndPlaypng2.png",
                  fullWidth: 1041,
                  fullHeight: 1100,
                  aspectRatio: undefined
                }}
              />
            </div>

            <div className={classNames(projectcss.all, sty.column__pd6Za)}>
              <div className={classNames(projectcss.all, sty.freeBox___3Wu2)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__yzWi9)}
                  displayHeight={"37px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/copy_of_coach_website/images/group925Svg.svg",
                    fullWidth: 300,
                    fullHeight: 74,
                    aspectRatio: 4.081633
                  }}
                />

                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__ajDww
                  )}
                >
                  {"Deploy training when it's most needed"}
                </h2>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uu5Aa
                  )}
                >
                  {
                    "In the app, employees test and refresh their knowledge through a set of learning games. Coach figures out their knowledge gaps, adapts the learning path and assigns learning materials to help them improve."
                  }
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__xpsPi)}>
                  <CorrectsvgIcon
                    className={classNames(projectcss.all, sty.svg__tuQQq)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uOz2A
                    )}
                  >
                    {"ENGAGING LEARNING EXPERIENCE"}
                  </div>
                </div>

                <div
                  className={classNames(projectcss.all, sty.freeBox___4DXrA)}
                >
                  <CorrectsvgIcon
                    className={classNames(projectcss.all, sty.svg__fTbjt)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__koIOa
                    )}
                  >
                    {"AVAILABLE ON ALL PLATFORMS AND LANGUAGES"}
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__s6V2)}>
                  <CorrectsvgIcon
                    className={classNames(projectcss.all, sty.svg__aiwpN)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mxnOt
                    )}
                  >
                    {"SCIENCE-BACKED LEARNING METHODOLOGY"}
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__bPRe9)}>
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__cVcuH)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/copy_of_coach_website/images/crookedBg3Svg.svg",
                fullWidth: 300,
                fullHeight: 14,
                aspectRatio: 20.869565
              }}
            />
          </div>

          <div
            data-plasmic-name={"section4"}
            data-plasmic-override={overrides.section4}
            className={classNames(projectcss.all, sty.section4)}
          >
            <div className={classNames(projectcss.all, sty.column__oyfR)}>
              <div className={classNames(projectcss.all, sty.freeBox__xxeaj)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__sI351)}
                  displayHeight={"37px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/copy_of_coach_website/images/group924Svg.svg",
                    fullWidth: 300,
                    fullHeight: 66,
                    aspectRatio: 4.530612
                  }}
                />

                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__fpKi
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Track learning performance in real time"
                    : "Track learning performance in real time"}
                </h2>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9FdL
                  )}
                >
                  {
                    "Get in-depth analytics about knowledge levels across the organization. Coach lets you track hundreds of important KPI’s that will help you make better decisions and improve performance."
                  }
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__zISxX)}>
                  <CorrectsvgIcon
                    className={classNames(projectcss.all, sty.svg__ot1Cj)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yztwH
                    )}
                  >
                    {"MULTI-LEVEL INSIGHTS"}
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__fa7Le)}>
                  <CorrectsvgIcon
                    className={classNames(projectcss.all, sty.svg___4Zb1K)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zNnGh
                    )}
                  >
                    {"GENERATE & SHARE REPORTS"}
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__wxVb1)}>
                  <CorrectsvgIcon
                    className={classNames(projectcss.all, sty.svg__a4F2R)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iH2G
                    )}
                  >
                    {"DETECT PROBLEMS AND KNOWLEDGE GAPS"}
                  </div>
                </div>
              </div>

              <div className={classNames(projectcss.all, sty.freeBox__b46Ww)}>
                {true
                  ? p.renderPlasmicSlot({
                      defaultContents: true ? (
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__mDEbl
                          )}
                          endIcon={
                            true ? (
                              <DownArrowIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__oPxPp
                                )}
                                role={"img"}
                              />
                            ) : null
                          }
                          link={"https://calendly.com/kalina-t/30min" as const}
                          showEndIcon={true}
                        >
                          {true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__j5W2Y
                              )}
                            >
                              {"Explore all features"}
                            </div>
                          ) : null}
                        </Button>
                      ) : null,
                      value: args.whiteblueButton,
                      className: classNames(sty.slotTargetWhiteblueButton)
                    })
                  : null}
              </div>
            </div>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.column__vZbAj)}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__cuov1)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("372px" as const)
                    : ("100%" as const)
                }
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"85%" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/copy_of_coach_website/images/_3TrackAndImprovepng2.png",
                  fullWidth: 1041,
                  fullHeight: 1100,
                  aspectRatio: undefined
                }}
              />

              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <Button
                  data-plasmic-name={"whiteblueButton2"}
                  data-plasmic-override={overrides.whiteblueButton2}
                  className={classNames("__wab_instance", sty.whiteblueButton2)}
                  endIcon={
                    <DownArrowIcon
                      className={classNames(projectcss.all, sty.svg__nxdK)}
                      role={"img"}
                    />
                  }
                  showEndIcon={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yIk3M
                    )}
                  >
                    {"Explore all features"}
                  </div>
                </Button>
              ) : null}
            </p.Stack>
          </div>

          <div
            data-plasmic-name={"section5"}
            data-plasmic-override={overrides.section5}
            className={classNames(projectcss.all, sty.section5)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__eI6Uy)} />

            <div className={classNames(projectcss.all, sty.columns___2AJtn)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.column__rFlg)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__e56Gh)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("auto" as const)
                      : ("auto" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("231px" as const)
                      : ("320px" as const)
                  }
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/copy_of_coach_website/images/group937Svg.svg",
                    fullWidth: 300,
                    fullHeight: 74,
                    aspectRatio: 4.078652
                  }}
                />

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns__nVfku)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__nzjad)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gUx9T
                      )}
                    >
                      {'"Perfect tool!'}
                    </div>

                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__gt8Hi
                      )}
                    >
                      {
                        "I consider the discovery of Coach and the opportunity to apply it in a complex learning process through fun and team building, while also raising digital awareness in the organization, a privilege in my HR career. Coach is not only fun, engaging, and easy to use, it provides incredibly effective learning results in a very short time."
                      }
                    </h1>

                    {true ? (
                      <Button
                        data-plasmic-name={"whiteblueButton3"}
                        data-plasmic-override={overrides.whiteblueButton3}
                        className={classNames(
                          "__wab_instance",
                          sty.whiteblueButton3
                        )}
                        endIcon={
                          true ? (
                            <DownArrowIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__okUVz
                              )}
                              role={"img"}
                            />
                          ) : null
                        }
                        showEndIcon={true}
                      >
                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___2SOn3
                            )}
                          >
                            {"READ FULL CASE STUDY"}
                          </div>
                        ) : null}
                      </Button>
                    ) : null}
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__tvpUb)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__d3SOe)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("160px" as const)
                            : ("270px" as const)
                        }
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/copy_of_coach_website/images/testimonialimgIvanapng.png",
                          fullWidth: 810,
                          fullHeight: 810,
                          aspectRatio: undefined
                        }}
                      />
                    ) : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__dwBhC)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__ilqFt)}
                        displayHeight={"60px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/copy_of_coach_website/images/testimonialLogoSpringwellpng.png",
                          fullWidth: 301,
                          fullHeight: 196,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__iiU36
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>
                            {"Ivana Dojchinovska-Stojanovikj\n"}
                          </React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#3E7CB1" }}
                          >
                            {"People Management Consultant"}
                          </span>
                        </React.Fragment>
                      </div>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </div>

            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"section10"}
                data-plasmic-override={overrides.section10}
                hasGap={true}
                className={classNames(projectcss.all, sty.section10)}
              >
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__rfdva
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF" }}
                      >
                        {
                          "By utilizing Coach, we make sure your training sticks."
                        }
                      </span>
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF" }}
                      >
                        {"By utilizing Coach, we make sure\n "}
                      </span>
                      <React.Fragment>{"\n"}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF" }}
                      >
                        {"your training sticks."}
                      </span>
                    </React.Fragment>
                  )}
                </h2>

                <div
                  className={classNames(projectcss.all, sty.freeBox__vHinw)}
                />

                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <ShowcaseComponentMobile
                    data-plasmic-name={"showcaseComponentMobile"}
                    data-plasmic-override={overrides.showcaseComponentMobile}
                    className={classNames(
                      "__wab_instance",
                      sty.showcaseComponentMobile
                    )}
                    isLight={true}
                  />
                ) : null}

                <Button
                  data-plasmic-name={"featuresButton"}
                  data-plasmic-override={overrides.featuresButton}
                  className={classNames("__wab_instance", sty.featuresButton)}
                  link={`/features`}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jyOe6
                    )}
                  >
                    {"SEE ALL FEATURES"}
                  </div>
                </Button>
              </p.Stack>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"section13"}
                data-plasmic-override={overrides.section13}
                hasGap={true}
                className={classNames(projectcss.all, sty.section13)}
              >
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__td64I
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF" }}
                      >
                        {
                          "By utilizing Coach, we make sure your training sticks."
                        }
                      </span>
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF" }}
                      >
                        {"By utilizing Coach, we make sure\n "}
                      </span>
                      <React.Fragment>{"\n"}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF" }}
                      >
                        {"your training sticks."}
                      </span>
                    </React.Fragment>
                  )}
                </h2>

                <div
                  className={classNames(projectcss.all, sty.freeBox__fHmz1)}
                />

                <ShowcaseComponent
                  data-plasmic-name={"showcaseComponent"}
                  data-plasmic-override={overrides.showcaseComponent}
                  buttonTitle={"See Features" as const}
                  className={classNames(
                    "__wab_instance",
                    sty.showcaseComponent
                  )}
                  isLight={false}
                  onClickNavigateToString={"features" as const}
                  showButton={true}
                />
              </p.Stack>
            ) : null}
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"section6"}
            data-plasmic-override={overrides.section6}
            hasGap={true}
            className={classNames(projectcss.all, sty.section6)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___1IuIf)}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__wiJ5A
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                  <React.Fragment>
                    <React.Fragment>
                      {"Train employees in a wide "}
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#3E7CB1" }}
                    >
                      {"range of industries"}
                    </span>
                  </React.Fragment>
                ) : (
                  <React.Fragment>
                    <React.Fragment>
                      {"Train employees in a wide\n"}
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#3E7CB1" }}
                    >
                      {"range of industries"}
                    </span>
                  </React.Fragment>
                )}
              </h2>

              <div
                className={classNames(projectcss.all, sty.freeBox___4Xuos)}
              />
            </p.Stack>

            <div className={classNames(projectcss.all, sty.freeBox__cm31I)}>
              <Slider
                adaptiveHeight={true}
                arrows={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                }
                autoplay={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                }
                centerMode={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                }
                centerPadding={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("50px" as const)
                    : ("30px" as const)
                }
                className={classNames("__wab_instance", sty.slider__ape1F)}
                dots={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? false
                    : true
                }
                draggable={true}
                infinite={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : undefined
                }
                rows={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (1 as const)
                    : (1 as const)
                }
                rtl={false}
                slidesPerRow={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (1 as const)
                    : (5 as const)
                }
                slidesToScroll={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (5 as const)
                    : (1 as const)
                }
                slidesToShow={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (1 as const)
                    : (1 as const)
                }
                swipeToSlide={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                }
                variableWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                }
                vertical={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? false
                    : undefined
                }
              >
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___0A6DS
                  )}
                  component={Link}
                  href={`/industry-consumer-electronics`}
                  platform={"nextjs"}
                >
                  <IndustryCard
                    className={classNames(
                      "__wab_instance",
                      sty.industryCard__vYh5
                    )}
                    consumerElectronics={true}
                  />
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__noNzj
                  )}
                  component={Link}
                  href={`/industry-manufacturing`}
                  platform={"nextjs"}
                >
                  <IndustryCard
                    className={classNames(
                      "__wab_instance",
                      sty.industryCard__uvDzZ
                    )}
                    manufacturing={true}
                  />
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__haHl
                  )}
                  component={Link}
                  href={`/industry-pharmaceuticals`}
                  platform={"nextjs"}
                >
                  <IndustryCard
                    className={classNames(
                      "__wab_instance",
                      sty.industryCard__hjiqB
                    )}
                    pharmaceuticals={true}
                  />
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__obAIu
                  )}
                  component={Link}
                  href={`/industry-telecommunication`}
                  platform={"nextjs"}
                >
                  <IndustryCard
                    className={classNames(
                      "__wab_instance",
                      sty.industryCard__ctGzV
                    )}
                    telecom={true}
                  />
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___1VHdF
                  )}
                  component={Link}
                  href={`/industry-luxury-goods`}
                  platform={"nextjs"}
                >
                  <IndustryCard
                    className={classNames(
                      "__wab_instance",
                      sty.industryCard___5MvsH
                    )}
                    luxuryGoods={true}
                  />
                </p.PlasmicLink>
              </Slider>
            </div>
          </p.Stack>

          <div className={classNames(projectcss.all, sty.freeBox__c8V9E)}>
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__pQgR)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/copy_of_coach_website/images/crookedBg3Svg.svg",
                fullWidth: 300,
                fullHeight: 14,
                aspectRatio: 20.869565
              }}
            />
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"section7"}
            data-plasmic-override={overrides.section7}
            hasGap={true}
            className={classNames(projectcss.all, sty.section7)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__rIjdZ)}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__msdrR
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "Who is it for?"
                  : "Who is it for?"}
              </h2>

              <div className={classNames(projectcss.all, sty.freeBox__ygTfj)} />
            </p.Stack>

            <Slider
              adaptiveHeight={true}
              arrows={
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              }
              autoplay={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              }
              centerMode={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              }
              centerPadding={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("50px" as const)
                  : ("30px" as const)
              }
              className={classNames("__wab_instance", sty.slider__nepNc)}
              dots={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? false
                  : true
              }
              draggable={true}
              infinite={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : undefined
              }
              rows={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? (1 as const)
                  : (1 as const)
              }
              rtl={false}
              slidesPerRow={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? (1 as const)
                  : (4 as const)
              }
              slidesToScroll={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? (4 as const)
                  : (1 as const)
              }
              slidesToShow={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? (1 as const)
                  : (1 as const)
              }
              swipeToSlide={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              }
              variableWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              }
              vertical={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? false
                  : undefined
              }
            >
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__ogWsP,
                  "" as const
                )}
                component={Link}
                href={`/who-is-it-for-managers`}
                platform={"nextjs"}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__kSn7F)}
                  role={"" as const}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__ariFm)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"90%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/copy_of_coach_website/images/coachManagerssvg.svg",
                      fullWidth: 203,
                      fullHeight: 150,
                      aspectRatio: 1.354839
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__slKGz
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{"Coach for "}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#11253E", fontWeight: 700 }}
                      >
                        {"Managers"}
                      </span>
                      <React.Fragment>{"\n(HR, L&D, Training)"}</React.Fragment>
                    </React.Fragment>
                  </div>
                </p.Stack>
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__yxgmA
                )}
                component={Link}
                href={`/who-is-it-for-ceos`}
                platform={"nextjs"}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___3JbwC)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__yj956)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"90%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/copy_of_coach_website/images/coachSeossvg.svg",
                      fullWidth: 203,
                      fullHeight: 150,
                      aspectRatio: 1.354839
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jJauo
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{"Coach for "}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"CEO's"}
                      </span>
                    </React.Fragment>
                  </div>
                </p.Stack>
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__fyIl
                )}
                component={Link}
                href={`/who-is-it-for-instructional-designers`}
                platform={"nextjs"}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__cAmW)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__tniFg)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"90%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/copy_of_coach_website/images/coachIdssvg.svg",
                      fullWidth: 203,
                      fullHeight: 150,
                      aspectRatio: 1.354839
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__byeBf
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{"Coach for "}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"Instructional Designers"}
                      </span>
                    </React.Fragment>
                  </div>
                </p.Stack>
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__fvI7B
                )}
                component={Link}
                href={`/who-is-it-for-employees`}
                platform={"nextjs"}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__zpvEu)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__agS7)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"90%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/copy_of_coach_website/images/coachEmployeessvg.svg",
                      fullWidth: 203,
                      fullHeight: 150,
                      aspectRatio: 1.354839
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ggqiv
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{"Coach for "}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"Employees"}
                      </span>
                    </React.Fragment>
                  </div>
                </p.Stack>
              </p.PlasmicLink>
            </Slider>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"section8"}
            data-plasmic-override={overrides.section8}
            hasGap={true}
            className={classNames(projectcss.all, sty.section8)}
          >
            <h2
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2__mzPy4
              )}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                <React.Fragment>
                  <React.Fragment>{"See how we can help you"}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#3E7CB1" }}
                  >
                    {" transform the way knowledge is attained."}
                  </span>
                </React.Fragment>
              ) : (
                <React.Fragment>
                  <React.Fragment>{"See how we can help you\n"}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#3E7CB1" }}
                  >
                    {"transform the way knowledge is attained."}
                  </span>
                </React.Fragment>
              )}
            </h2>

            <div className={classNames(projectcss.all, sty.freeBox__pyKVp)} />
          </p.Stack>

          <div
            data-plasmic-name={"ctaBlog"}
            data-plasmic-override={overrides.ctaBlog}
            className={classNames(projectcss.all, sty.ctaBlog)}
          >
            <div className={classNames(projectcss.all, sty.columns__mSq2I)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.column__cylVf)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__igDnr
                  )}
                >
                  {"READY TO START?"}
                </div>

                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__ro9R
                  )}
                >
                  {
                    "See the full power of Coach in action, and find out how it can help you reach your goals."
                  }
                </h1>

                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__klnJ4)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("200px" as const)
                        : ("310px" as const)
                    }
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/copy_of_coach_website/images/_287StartupFlatlinesvg.svg",
                      fullWidth: 173,
                      fullHeight: 150,
                      aspectRatio: 1.155172
                    }}
                  />
                ) : null}

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___0XkBa)}
                >
                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__gXXy3
                    )}
                    component={Link}
                    href={"https://calendly.com/kalina-t/30min" as const}
                    platform={"nextjs"}
                    target={"_blank" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6H8B
                      )}
                    >
                      {"BOOK A DEMO"}
                    </div>

                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___7L9Mj)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"15px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_coach_website/images/buttonCaretWhitesvg2.svg",
                        fullWidth: 108,
                        fullHeight: 150,
                        aspectRatio: 0.722222
                      }}
                    />
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </div>

            {true ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"section9"}
                data-plasmic-override={overrides.section9}
                hasGap={true}
                className={classNames(projectcss.all, sty.section9)}
              >
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__lfZcc
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{"Our latest \n"}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#3E7CB1" }}
                    >
                      {"news and resources"}
                    </span>
                  </React.Fragment>
                </h1>

                <div
                  className={classNames(projectcss.all, sty.freeBox___9Igxe)}
                />
              </p.Stack>
            ) : null}
            {true ? (
              <div className={classNames(projectcss.all, sty.columns__qvHc)}>
                <div className={classNames(projectcss.all, sty.column___780Y)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__v45DE)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___1J8Ib)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_coach_website/images/frame910Jpg.jpeg",
                        fullWidth: 323,
                        fullHeight: 203,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__foybv
                      )}
                    >
                      {"PRESS ARTICLE"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iwJuF
                      )}
                    >
                      {"Konceptiva: startup of the month January ’22!"}
                    </div>
                  </p.Stack>
                </div>

                <div className={classNames(projectcss.all, sty.column__uhLyD)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__gdjD5)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__gzNLc)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_coach_website/images/frame909Jpg.jpeg",
                        fullWidth: 323,
                        fullHeight: 203,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jrYbQ
                      )}
                    >
                      {"EVENT"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wgXap
                      )}
                    >
                      {"Gamification of Corporate\nTraining - #Session1"}
                    </div>
                  </p.Stack>
                </div>

                <div className={classNames(projectcss.all, sty.column__djKtd)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__w3KVc)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__yNy9B)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/copy_of_coach_website/images/frame908Jpg.jpeg",
                        fullWidth: 323,
                        fullHeight: 203,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6In73
                      )}
                    >
                      {"BLOG"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6IjcV
                      )}
                    >
                      {"Here are 5 tips for creating\nan effective course"}
                    </div>
                  </p.Stack>
                </div>
              </div>
            ) : null}
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__df5E)} />

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root2: [
    "root2",
    "reusableHeader",
    "section1",
    "copy",
    "ctaBlog2",
    "section12",
    "section11",
    "section2",
    "section3",
    "section4",
    "whiteblueButton2",
    "section5",
    "whiteblueButton3",
    "section10",
    "showcaseComponentMobile",
    "featuresButton",
    "section13",
    "showcaseComponent",
    "section6",
    "section7",
    "section8",
    "ctaBlog",
    "section9",
    "footer"
  ],
  reusableHeader: ["reusableHeader"],
  section1: ["section1", "copy"],
  copy: ["copy"],
  ctaBlog2: ["ctaBlog2", "section12", "section11"],
  section12: ["section12"],
  section11: ["section11"],
  section2: ["section2"],
  section3: ["section3"],
  section4: ["section4", "whiteblueButton2"],
  whiteblueButton2: ["whiteblueButton2"],
  section5: [
    "section5",
    "whiteblueButton3",
    "section10",
    "showcaseComponentMobile",
    "featuresButton",
    "section13",
    "showcaseComponent"
  ],
  whiteblueButton3: ["whiteblueButton3"],
  section10: ["section10", "showcaseComponentMobile", "featuresButton"],
  showcaseComponentMobile: ["showcaseComponentMobile"],
  featuresButton: ["featuresButton"],
  section13: ["section13", "showcaseComponent"],
  showcaseComponent: ["showcaseComponent"],
  section6: ["section6"],
  section7: ["section7"],
  section8: ["section8"],
  ctaBlog: ["ctaBlog", "section9"],
  section9: ["section9"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root2: "div";
  reusableHeader: typeof ReusableHeader;
  section1: "div";
  copy: "div";
  ctaBlog2: "div";
  section12: "div";
  section11: "div";
  section2: "div";
  section3: "div";
  section4: "div";
  whiteblueButton2: typeof Button;
  section5: "div";
  whiteblueButton3: typeof Button;
  section10: "div";
  showcaseComponentMobile: typeof ShowcaseComponentMobile;
  featuresButton: typeof Button;
  section13: "div";
  showcaseComponent: typeof ShowcaseComponent;
  section6: "div";
  section7: "div";
  section8: "div";
  ctaBlog: "div";
  section9: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root2") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root2"),
  {
    // Helper components rendering sub-elements
    reusableHeader: makeNodeComponent("reusableHeader"),
    section1: makeNodeComponent("section1"),
    copy: makeNodeComponent("copy"),
    ctaBlog2: makeNodeComponent("ctaBlog2"),
    section12: makeNodeComponent("section12"),
    section11: makeNodeComponent("section11"),
    section2: makeNodeComponent("section2"),
    section3: makeNodeComponent("section3"),
    section4: makeNodeComponent("section4"),
    whiteblueButton2: makeNodeComponent("whiteblueButton2"),
    section5: makeNodeComponent("section5"),
    whiteblueButton3: makeNodeComponent("whiteblueButton3"),
    section10: makeNodeComponent("section10"),
    showcaseComponentMobile: makeNodeComponent("showcaseComponentMobile"),
    featuresButton: makeNodeComponent("featuresButton"),
    section13: makeNodeComponent("section13"),
    showcaseComponent: makeNodeComponent("showcaseComponent"),
    section6: makeNodeComponent("section6"),
    section7: makeNodeComponent("section7"),
    section8: makeNodeComponent("section8"),
    ctaBlog: makeNodeComponent("ctaBlog"),
    section9: makeNodeComponent("section9"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Home",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
