// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oVWAucqWj6DsPJvsydPAdo
// Component: Bt-e7_j9T8tH-Z
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: 8uXEbGCqxCxV6S/component
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent

import { useScreenVariants as useScreenVariantsvsF6OfTsfNeByl } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: VsF6OfTsfNeBYL/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_coach_website.module.css"; // plasmic-import: oVWAucqWj6DsPJvsydPAdo/projectcss
import sty from "./PlasmicMenuHeaderDesktop.module.css"; // plasmic-import: Bt-e7_j9T8tH-Z/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: hUz3QbUrxnIJqL/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: TE7ZlDmP2v4Kt-/icon

export type PlasmicMenuHeaderDesktop__VariantMembers = {
  base2: "base2";
};
export type PlasmicMenuHeaderDesktop__VariantsArgs = {
  base2?: SingleBooleanChoiceArg<"base2">;
};
type VariantPropType = keyof PlasmicMenuHeaderDesktop__VariantsArgs;
export const PlasmicMenuHeaderDesktop__VariantProps =
  new Array<VariantPropType>("base2");

export type PlasmicMenuHeaderDesktop__ArgsType = {};
type ArgPropType = keyof PlasmicMenuHeaderDesktop__ArgsType;
export const PlasmicMenuHeaderDesktop__ArgProps = new Array<ArgPropType>();

export type PlasmicMenuHeaderDesktop__OverridesType = {
  root?: p.Flex<"div">;
  columns?: p.Flex<"div">;
  hamburgerMenu?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultMenuHeaderDesktopProps {
  base2?: SingleBooleanChoiceArg<"base2">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicMenuHeaderDesktop__RenderFunc(props: {
  variants: PlasmicMenuHeaderDesktop__VariantsArgs;
  args: PlasmicMenuHeaderDesktop__ArgsType;
  overrides: PlasmicMenuHeaderDesktop__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "base2",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.base2 : undefined
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, $props, $ctx);

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsvsF6OfTsfNeByl()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___8AZlb, {
          [sty.freeBoxbase2___8AZlbvi69Y]: hasVariant($state, "base2", "base2")
        })}
      >
        {(
          hasVariant($state, "base2", "base2")
            ? true
            : hasVariant(globalVariants, "screen", "mobileOnly")
            ? true
            : true
        ) ? (
          <div
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            className={classNames(projectcss.all, sty.columns, {
              [sty.columnsbase2]: hasVariant($state, "base2", "base2")
            })}
          >
            {(
              hasVariant($state, "base2", "base2")
                ? true
                : hasVariant(globalVariants, "screen", "mobileOnly")
                ? true
                : true
            ) ? (
              <div
                className={classNames(projectcss.all, sty.column__fhAui, {
                  [sty.columnbase2__fhAuivi69Y]: hasVariant(
                    $state,
                    "base2",
                    "base2"
                  )
                })}
              >
                {(
                  hasVariant($state, "base2", "base2")
                    ? true
                    : hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___2Pw2Z, {
                      [sty.freeBoxbase2___2Pw2Zvi69Y]: hasVariant(
                        $state,
                        "base2",
                        "base2"
                      )
                    })}
                  >
                    {(hasVariant($state, "base2", "base2") ? true : true) ? (
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__fKIjz,
                          {
                            [sty.linkbase2__fKIjzvi69Y]: hasVariant(
                              $state,
                              "base2",
                              "base2"
                            )
                          }
                        )}
                        component={Link}
                        href={`/`}
                        platform={"nextjs"}
                      >
                        {(
                          hasVariant($state, "base2", "base2")
                            ? true
                            : hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img___2KxQ3, {
                              [sty.imgbase2___2KxQ3Vi69Y]: hasVariant(
                                $state,
                                "base2",
                                "base2"
                              )
                            })}
                            displayHeight={"39px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"none" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"123px" as const}
                            src={{
                              src: "/plasmic/copy_of_coach_website/images/coachlogoBlacksvg.svg",
                              fullWidth: 300,
                              fullHeight: 99,
                              aspectRatio: 3.02439
                            }}
                          />
                        ) : null}
                      </p.PlasmicLink>
                    ) : null}
                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vGzT9
                        )}
                      >
                        <button
                          className={classNames(
                            projectcss.all,
                            projectcss.button,
                            projectcss.__wab_text,
                            sty.button___9VgWy
                          )}
                        >
                          {"Sign up"}
                        </button>

                        {true ? (
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__tcjE
                            )}
                            color={"clear" as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__mOq56
                              )}
                            >
                              {"Log in"}
                            </div>
                          </Button>
                        ) : null}
                      </div>
                    ) : null}
                  </p.Stack>
                ) : null}
              </div>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div
                className={classNames(projectcss.all, sty.column__hLHq, {
                  [sty.columnbase2__hLHqvi69Y]: hasVariant(
                    $state,
                    "base2",
                    "base2"
                  )
                })}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__oicBo)}
                  >
                    {true ? (
                      <button
                        className={classNames(
                          projectcss.all,
                          projectcss.button,
                          projectcss.__wab_text,
                          sty.button__bdul9
                        )}
                      >
                        {"SIGN IN"}
                      </button>
                    ) : null}
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eSWn
                        )}
                      >
                        {"or"}
                      </div>
                    ) : null}

                    <button
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        projectcss.__wab_text,
                        sty.button__iG9BN,
                        {
                          [sty.buttonbase2__iG9BNvi69Y]: hasVariant(
                            $state,
                            "base2",
                            "base2"
                          )
                        }
                      )}
                    >
                      {"REQUEST ACCESS"}
                    </button>
                  </p.Stack>
                ) : null}
              </div>
            ) : null}
          </div>
        ) : null}
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <NavigationBar
            brand={
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link___8CT5O
                )}
                component={Link}
                href={"#" as const}
                platform={"nextjs"}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___9IZOo)}
                  displayHeight={"40px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  src={{
                    src: "/plasmic/copy_of_coach_website/images/coachlogoBlacksvg.svg",
                    fullWidth: 300,
                    fullHeight: 99,
                    aspectRatio: 3.02439
                  }}
                />
              </p.PlasmicLink>
            }
            className={classNames("__wab_instance", sty.navigationBar__epvMn)}
            closeButton={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__nmXns)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                src={"https://static1.plasmic.app/close.svg" as const}
              />
            }
            itemsGap={8 as const}
            menuItems={
              <React.Fragment>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__fTeUi
                  )}
                  component={Link}
                  href={"/" as const}
                  platform={"nextjs"}
                >
                  {"Home"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__v5SyT
                  )}
                  component={Link}
                  href={"/" as const}
                  platform={"nextjs"}
                >
                  {"About"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__z2NAl
                  )}
                  component={Link}
                  href={"/" as const}
                  platform={"nextjs"}
                >
                  {"Contact"}
                </p.PlasmicLink>
              </React.Fragment>
            }
            openButton={
              <p.PlasmicImg
                data-plasmic-name={"hamburgerMenu"}
                data-plasmic-override={overrides.hamburgerMenu}
                alt={""}
                className={classNames(sty.hamburgerMenu)}
                displayHeight={"25px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"25px" as const}
                src={{
                  src: "/plasmic/copy_of_coach_website/images/icons8Menusvg.svg",
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }}
              />
            }
            responsiveBreakpoint={768 as const}
          />
        ) : null}
        {(hasVariant($state, "base2", "base2") ? true : true) ? (
          <NavigationBar
            brand={
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__lJoL
                )}
                component={Link}
                href={"#" as const}
                platform={"nextjs"}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__dnCbt, {
                      [sty.imgbase2__dnCbtvi69Y]: hasVariant(
                        $state,
                        "base2",
                        "base2"
                      )
                    })}
                    displayHeight={"39px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"123px" as const}
                    src={{
                      src: "/plasmic/copy_of_coach_website/images/coachlogoBlacksvg.svg",
                      fullWidth: 300,
                      fullHeight: 99,
                      aspectRatio: 3.02439
                    }}
                  />
                ) : null}
              </p.PlasmicLink>
            }
            className={classNames("__wab_instance", sty.navigationBar__xqGzq, {
              [sty.navigationBarbase2__xqGzqvi69Y]: hasVariant(
                $state,
                "base2",
                "base2"
              )
            })}
            closeButton={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__bO9Qw)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                src={"https://static1.plasmic.app/close.svg" as const}
              />
            }
            itemsGap={8 as const}
            menuItems={
              <React.Fragment>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__g9P2H
                  )}
                  component={Link}
                  href={"/" as const}
                  platform={"nextjs"}
                >
                  {"Home"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__wlLki
                  )}
                  component={Link}
                  href={"/" as const}
                  platform={"nextjs"}
                >
                  {"About"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link___9UfG
                  )}
                  component={Link}
                  href={"/" as const}
                  platform={"nextjs"}
                >
                  {"Contact"}
                </p.PlasmicLink>

                <button
                  className={classNames(
                    projectcss.all,
                    projectcss.button,
                    projectcss.__wab_text,
                    sty.button__mVcKf,
                    {
                      [sty.buttonbase2__mVcKFvi69Y]: hasVariant(
                        $state,
                        "base2",
                        "base2"
                      )
                    }
                  )}
                >
                  {"REQUEST ACCESS"}
                </button>
              </React.Fragment>
            }
            openButton={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__zuFs5)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                src={"https://static1.plasmic.app/menu.svg" as const}
              />
            }
            responsiveBreakpoint={768 as const}
          />
        ) : null}
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "columns", "hamburgerMenu"],
  columns: ["columns"],
  hamburgerMenu: ["hamburgerMenu"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  columns: "div";
  hamburgerMenu: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMenuHeaderDesktop__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMenuHeaderDesktop__VariantsArgs;
    args?: PlasmicMenuHeaderDesktop__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMenuHeaderDesktop__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMenuHeaderDesktop__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMenuHeaderDesktop__ArgProps,
          internalVariantPropNames: PlasmicMenuHeaderDesktop__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicMenuHeaderDesktop__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMenuHeaderDesktop";
  } else {
    func.displayName = `PlasmicMenuHeaderDesktop.${nodeName}`;
  }
  return func;
}

export const PlasmicMenuHeaderDesktop = Object.assign(
  // Top-level PlasmicMenuHeaderDesktop renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    hamburgerMenu: makeNodeComponent("hamburgerMenu"),

    // Metadata about props expected for PlasmicMenuHeaderDesktop
    internalVariantProps: PlasmicMenuHeaderDesktop__VariantProps,
    internalArgProps: PlasmicMenuHeaderDesktop__ArgProps
  }
);

export default PlasmicMenuHeaderDesktop;
/* prettier-ignore-end */
